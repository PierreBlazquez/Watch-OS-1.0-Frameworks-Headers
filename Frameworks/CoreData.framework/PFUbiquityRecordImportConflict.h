//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSArray, NSDate, NSDictionary, NSManagedObject, NSMutableDictionary, NSNumber, NSString, PFUbiquityImportContext, PFUbiquityKnowledgeVector;

@interface PFUbiquityRecordImportConflict : NSObject
{
    NSString *_conflictingObjectGlobalIDStr;
    NSManagedObject *_sourceObject;
    NSDictionary *_conflictingLogContent;
    PFUbiquityKnowledgeVector *_conflictingLogKnowledgeVector;
    PFUbiquityKnowledgeVector *_currentKnowledgeVector;
    int _conflictingLogTransactionType;
    NSDate *_conflictLogDate;
    NSNumber *_conflictingLogTransactionNumber;
    NSArray *_transactionHistory;
    NSDictionary *_globalIDIndexToLocalIDURIMap;
    PFUbiquityImportContext *_importContext;
    NSMutableDictionary *_relationshipsToObjectIDsToCheck;
}

+ (void)initialize;
+ (id)createTransactionLogForTransactionEntry:(id)arg1 withImportContext:(id)arg2 error:(id *)arg3;
+ (id)createSnapshotFromManagedObject:(id)arg1 withSourceObject:(id)arg2;
+ (id)electAncestorKnowledgeVectorForKnowledgeVector:(id)arg1 withExportingPeerID:(id)arg2 fromPeerSnapshotCollection:(id)arg3;
+ (int)resolvedTypeForConflictingLogType:(int)arg1 andLatestTransactionEntry:(id)arg2 skipObject:(char *)arg3;
@property(retain, nonatomic) NSManagedObject *sourceObject; // @synthesize sourceObject=_sourceObject;
- (id)description;
- (id)init;
- (void)dealloc;
@property(retain, nonatomic) NSNumber *conflictingLogTransactionNumber; // @synthesize conflictingLogTransactionNumber=_conflictingLogTransactionNumber;
@property(retain, nonatomic) NSDate *conflictLogDate; // @synthesize conflictLogDate=_conflictLogDate;
@property(nonatomic) int conflictingLogTransactionType; // @synthesize conflictingLogTransactionType=_conflictingLogTransactionType;
@property(retain, nonatomic) NSDictionary *conflictingLogContent; // @synthesize conflictingLogContent=_conflictingLogContent;
@property(retain, nonatomic) NSString *conflictingObjectGlobalIDStr; // @synthesize conflictingObjectGlobalIDStr=_conflictingObjectGlobalIDStr;
- (id)createSetOfManagedObjectIDsForGlobalIDsInRelationship:(id)arg1 withValue:(id)arg2 withGlobalIDToLocalIDURIMap:(id)arg3 andTransactionLog:(id)arg4;
@property(retain, nonatomic) NSDictionary *globalIDIndexToLocalIDURIMap; // @synthesize globalIDIndexToLocalIDURIMap=_globalIDIndexToLocalIDURIMap;
- (id)createSnapshotDictionaryForObjectWithEntry:(id)arg1 inTransactionLog:(id)arg2 withError:(id *)arg3;
- (id)createSnapshotFromBaselineForEntry:(id)arg1 error:(id *)arg2;
- (BOOL)resolveMergeConflictForLogContent:(id)arg1 previousSnapshot:(id)arg2 andAncestorSnapshot:(id)arg3 withOldVersion:(unsigned int)arg4 andNewVersion:(unsigned int)arg5 error:(id *)arg6;
@property(retain, nonatomic) PFUbiquityKnowledgeVector *conflictingLogKnowledgeVector; // @synthesize conflictingLogKnowledgeVector=_conflictingLogKnowledgeVector;
- (id)createSnapshotDictionaryFromLogEntry:(id)arg1 withError:(id *)arg2;
@property(retain, nonatomic) NSArray *transactionHistory; // @synthesize transactionHistory=_transactionHistory;
- (id)_newNormalizedSnapshot:(id)arg1 forObject:(id)arg2;
- (void)addObjectID:(id)arg1 forRelationship:(id)arg2;
- (void)addObjectIDsForDiff:(id)arg1 forRelationship:(id)arg2;
@property(readonly, nonatomic) NSDictionary *relationshipToObjectIDsToCheck; // @synthesize relationshipToObjectIDsToCheck=_relationshipsToObjectIDsToCheck;
- (id)createSnapshotFromLogContent:(id)arg1 withTransactionLog:(id)arg2;
@property(retain, nonatomic) PFUbiquityImportContext *importContext; // @synthesize importContext=_importContext;
@property(retain, nonatomic) PFUbiquityKnowledgeVector *currentKnowledgeVector; // @synthesize currentKnowledgeVector=_currentKnowledgeVector;
- (BOOL)resolveConflict:(id *)arg1;

@end

