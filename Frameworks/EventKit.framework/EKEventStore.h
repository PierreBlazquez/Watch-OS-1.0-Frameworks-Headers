//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "EKDaemonConnection.h"

@class EKAlarm, EKCalendar, EKDaemonConnection, NSArray, NSMutableDictionary, NSMutableSet, NSNumber, NSObject<OS_dispatch_queue>, NSString, NSTimeZone;

@interface EKEventStore : NSObject <EKDaemonConnection>
{
    NSMutableDictionary *_registeredObjects;
    NSMutableDictionary *_publicRegisteredObjects;
    NSMutableSet *_insertedObjects;
    NSMutableSet *_deletedObjects;
    NSMutableSet *_updatedObjects;
    NSNumber *_defaultTimedAlarmOffset;
    NSNumber *_defaultAllDayAlarmOffset;
    EKCalendar *_defaultCalendarForNewEvents;
    EKCalendar *_defaultCalendarForNewReminders;
    EKDaemonConnection *_database;
    unsigned long _flags;
    NSTimeZone *_timeZone;
    NSMutableDictionary *_calendars;
    NSMutableDictionary *_sources;
    NSMutableSet *_objectsPendingCommit;
    NSObject<OS_dispatch_queue> *_calendarQueue;
    NSObject<OS_dispatch_queue> *_registeredQueue;
    NSObject<OS_dispatch_queue> *_unsavedChangesQueue;
    NSObject<OS_dispatch_queue> *_dbChangedQueue;
    NSMutableDictionary *_cachedValidatedEmails;
    double _lastDatabaseNotificationTimestamp;
}

+ (Class)publicClassForEntityName:(id)arg1;
+ (Class)classForEntityName:(id)arg1;
+ (int)authorizationStatusForEntityType:(unsigned int)arg1;
@property(nonatomic) NSMutableSet *deletedObjects; // @synthesize deletedObjects=_deletedObjects;
@property(nonatomic) NSMutableSet *updatedObjects; // @synthesize updatedObjects=_updatedObjects;
@property(nonatomic) NSMutableSet *insertedObjects; // @synthesize insertedObjects=_insertedObjects;
@property(nonatomic) NSMutableDictionary *registeredObjects; // @synthesize registeredObjects=_registeredObjects;
- (id)objectWithObjectID:(id)arg1;
- (void)rollback;
- (int)sequenceNumber;
- (id)sources;
@property(nonatomic) unsigned long flags; // @synthesize flags=_flags;
- (id)calendarWithIdentifier:(id)arg1;
- (void)setSourceAccountManagement:(int)arg1;
@property(readonly) EKDaemonConnection *connection;
@property(copy, nonatomic) NSTimeZone *timeZone; // @synthesize timeZone=_timeZone;
- (void)reset;
- (id)init;
- (void)dealloc;
- (oneway void)release;
@property(retain, nonatomic) NSMutableDictionary *_cachedValidatedEmails; // @synthesize _cachedValidatedEmails;
@property(nonatomic) NSObject<OS_dispatch_queue> *dbChangedQueue; // @synthesize dbChangedQueue=_dbChangedQueue;
@property(nonatomic) NSObject<OS_dispatch_queue> *unsavedChangesQueue; // @synthesize unsavedChangesQueue=_unsavedChangesQueue;
@property(nonatomic) NSObject<OS_dispatch_queue> *registeredQueue; // @synthesize registeredQueue=_registeredQueue;
@property(nonatomic) NSObject<OS_dispatch_queue> *calendarQueue; // @synthesize calendarQueue=_calendarQueue;
@property(nonatomic) NSMutableSet *objectsPendingCommit; // @synthesize objectsPendingCommit=_objectsPendingCommit;
@property(retain, nonatomic) NSMutableDictionary *_sources; // @synthesize _sources;
@property(retain, nonatomic) NSMutableDictionary *_calendars; // @synthesize _calendars;
@property(nonatomic) double lastDatabaseNotificationTimestamp; // @synthesize lastDatabaseNotificationTimestamp=_lastDatabaseNotificationTimestamp;
@property(retain, nonatomic) EKDaemonConnection *database; // @synthesize database=_database;
@property(retain, nonatomic) EKCalendar *_defaultCalendarForNewReminders; // @synthesize _defaultCalendarForNewReminders;
@property(retain, nonatomic) EKCalendar *_defaultCalendarForNewEvents; // @synthesize _defaultCalendarForNewEvents;
@property(nonatomic) NSMutableDictionary *publicRegisteredObjects; // @synthesize publicRegisteredObjects=_publicRegisteredObjects;
- (BOOL)moveDiagnosticsLogToCrashReporterFolder;
- (int)emailAddressValidationStatus:(id)arg1;
- (void)cacheValidationStatusForEmail:(id)arg1 status:(int)arg2;
@property(readonly, nonatomic) EKAlarm *defaultAllDayAlarm;
@property(retain, nonatomic) NSNumber *defaultAllDayAlarmOffset; // @synthesize defaultAllDayAlarmOffset=_defaultAllDayAlarmOffset;
@property(readonly, nonatomic) EKAlarm *defaultTimedAlarm;
@property(retain, nonatomic) NSNumber *defaultTimedAlarmOffset; // @synthesize defaultTimedAlarmOffset=_defaultTimedAlarmOffset;
- (void)markChangedObjectIDsConsumedUpToToken:(int)arg1;
- (void)fetchChangedObjectIDsSinceToken:(int)arg1 resultHandler:(CDUnknownBlockType)arg2;
- (BOOL)registerForDetailedChangeTracking:(id *)arg1;
- (void)_protectedDataDidBecomeAvailable;
- (id)predicateForEventCreatedFromSuggestionWithOpaqueKey:(id)arg1;
- (id)predicateForEventsWithStartDate:(id)arg1 title:(id)arg2 source:(id)arg3;
- (id)predicateForTravelEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (id)predicateForMasterEventsInCalendars:(id)arg1;
- (id)predicateForUpcomingEventsWithLimit:(int)arg1;
- (id)predicateForUnalertedEvents;
- (id)predicateForUnacknowledgedEvents;
- (id)predicateForNotificationCenterVisibleEvents;
- (id)predicateForNotifiableEvents;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 eventUUID:(id)arg3 calendars:(id)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 loadDefaultProperties:(BOOL)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3;
- (void)locationBasedAlarmOccurrencesWithCompletion:(CDUnknownBlockType)arg1;
- (void)alarmOccurrencesBetweenStartDate:(id)arg1 endDate:(id)arg2 inCalendars:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)alarmWithUUID:(id)arg1;
- (void)cancelFetchRequest:(id)arg1;
- (void)enumerateEventsMatchingPredicate:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)eventsMatchingPredicate:(id)arg1;
- (void)_trackModifiedObject:(id)arg1;
- (id)publicObjectWithObjectID:(id)arg1;
- (void)refreshSourcesIfNecessary;
- (BOOL)removeInviteReplyNotification:(id)arg1 error:(id *)arg2;
- (id)inviteReplyNotifications;
@property(readonly, nonatomic) NSArray *reminderNotifications;
@property(readonly, nonatomic) NSArray *inboxRepliedSectionItems;
@property(readonly, nonatomic) NSArray *eventNotifications;
- (BOOL)removeResourceChange:(id)arg1 error:(id *)arg2;
- (id)resourceChangesForEntityTypes:(unsigned int)arg1;
- (id)earliestExpiringNotifiableEventEndDateAfterDate:(id)arg1 timeZone:(id)arg2;
@property(readonly, nonatomic) int notifiableEventCount;
@property(readonly, nonatomic) int unacknowledgedEventCount;
- (id)markNotificationsAlertedAndSave:(id)arg1;
@property(nonatomic) BOOL showDeclinedEvents;
- (id)scheduledTaskCacheFetchTasksOnDay:(id)arg1;
- (id)scheduledTaskCacheFetchDaysAndTaskCounts;
- (id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1;
- (id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1 onDay:(double)arg2;
- (BOOL)occurrenceCacheOccurrencesAreBeingGenerated;
- (id)insertNewExceptionDateWithDate:(id)arg1;
- (id)insertNewEvent;
- (id)calendarWithExternalURI:(id)arg1;
- (id)doEvents:(id)arg1 haveOccurrencesAfterDate:(id)arg2;
- (id)eventWithUUID:(id)arg1;
- (BOOL)fetchProperties:(id)arg1 forReminders:(id)arg2;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(BOOL)arg3 completed:(BOOL)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8;
- (id)predicateForRemindersWithSearchTerm:(id)arg1;
- (id)predicateForCompletedRemindersWithCalendars:(id)arg1;
- (id)predicateForRemindersWithTitle:(id)arg1 calendars:(id)arg2;
- (id)predicateForAllRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForAllRemindersWithDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForCompletedRemindersWithDueDateOrCompletionDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForIncompleteRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForCompletedRemindersWithCompletionDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForIncompleteRemindersWithDueDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForRemindersInCalendars:(id)arg1;
- (id)fetchRemindersMatchingPredicate:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (int)countOfRemindersMatchingPredicate:(id)arg1;
- (id)insertNewReminder;
- (id)calendarItemsWithExternalIdentifier:(id)arg1;
- (id)reminderWithExternalURI:(id)arg1;
- (BOOL)removeReminder:(id)arg1 error:(id *)arg2;
- (BOOL)saveReminder:(id)arg1 error:(id *)arg2;
- (void)setDefaultCalendarForNewReminders:(id)arg1;
- (id)defaultCalendarForNewReminders;
- (void)setDefaultCalendarForNewEvents:(id)arg1;
@property(readonly, nonatomic) EKCalendar *defaultCalendarForNewEvents;
- (struct CGColor *)copyCGColorForNewCalendar;
- (id)importICS:(id)arg1 intoCalendar:(id)arg2 options:(unsigned int)arg3;
- (BOOL)setInvitationStatus:(unsigned int)arg1 forEvents:(id)arg2 error:(id *)arg3;
- (BOOL)setInvitationStatus:(unsigned int)arg1 forEvent:(id)arg2 error:(id *)arg3;
- (BOOL)removeEvent:(id)arg1 span:(int)arg2 error:(id *)arg3;
- (BOOL)saveEvent:(id)arg1 span:(int)arg2 error:(id *)arg3;
- (id)eventWithUniqueId:(id)arg1;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2;
- (id)_eventOccurrenceWithURI:(id)arg1;
- (id)eventWithIdentifier:(id)arg1;
- (BOOL)deleteCalendar:(id)arg1 forEntityType:(int)arg2 error:(id *)arg3;
- (BOOL)removeCalendar:(id)arg1 error:(id *)arg2;
- (BOOL)saveCalendar:(id)arg1 error:(id *)arg2;
- (id)readWriteCalendarsForEntityType:(unsigned int)arg1;
- (int)readWriteCalendarCountForEntityType:(unsigned int)arg1;
- (BOOL)hideCalendarsFromNotificationCenter:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *calendars;
- (BOOL)removeSource:(id)arg1 error:(id *)arg2;
- (BOOL)saveSource:(id)arg1 error:(id *)arg2;
- (id)ownedSources;
- (id)localSource;
@property(readonly, nonatomic) NSString *eventStoreIdentifier;
- (id)changesSinceSequenceNumber:(int)arg1;
- (void)daemonRestarted;
- (id)calendarsForEntityType:(unsigned int)arg1;
- (void)_waitOnSemaphore:(id)arg1;
- (id)fetchEventsMatchingPredicate:(id)arg1 resultHandler:(CDUnknownBlockType)arg2;
- (void)_reregisterObject:(id)arg1 oldID:(id)arg2;
- (void)_forgetRegisteredObjects;
- (void)_registerObject:(id)arg1;
- (id)sourceWithIdentifier:(id)arg1;
- (id)calendarWithID:(id)arg1;
- (id)_addFetchedObjectWithID:(id)arg1;
- (void)_registerObjectImmediate:(id)arg1;
- (void)refreshSourcesIfNecessary:(BOOL)arg1;
- (void)_refreshDASource:(id)arg1 isUserRequested:(BOOL)arg2;
- (BOOL)removeInviteReplyNotifications:(id)arg1 error:(id *)arg2;
- (BOOL)removeResourceChanges:(id)arg1 error:(id *)arg2;
- (id)publicObjectWithPersistentObject:(id)arg1;
- (BOOL)markInviteReplyNotificationAlerted:(id)arg1;
- (BOOL)markCalendarAlerted:(id)arg1;
- (BOOL)markResourceChangeAlerted:(id)arg1 error:(id *)arg2;
- (BOOL)markEventAlerted:(id)arg1;
- (id)remindersMatchingPredicate:(id)arg1;
- (id)sharedCalendarInvitationsForEntityTypes:(unsigned int)arg1;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(BOOL)arg3 completed:(BOOL)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 maxResults:(unsigned int)arg9;
- (id)predicateForCompletedRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)_predicateForRemindersWithDate:(id)arg1 useAsCompletionDate:(BOOL)arg2 calendars:(id)arg3 limitToCompletedOrIncomplete:(BOOL)arg4 completed:(BOOL)arg5 includeDatesBefore:(BOOL)arg6 sortOrder:(int)arg7;
- (id)_calendarItemsMatchingPredicate:(id)arg1;
- (id)calendarItemWithIdentifier:(id)arg1;
- (BOOL)removeReminder:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)saveReminder:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (void)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned int)arg3 completion:(CDUnknownBlockType)arg4;
- (id)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned int)arg3;
- (void)_deleteObject:(id)arg1;
- (void)_insertObject:(id)arg1;
- (BOOL)removeEvent:(id)arg1 span:(int)arg2 commit:(BOOL)arg3 error:(id *)arg4;
- (BOOL)saveEvent:(id)arg1 span:(int)arg2 commit:(BOOL)arg3 error:(id *)arg4;
- (id)eventWithUniqueId:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2 checkValid:(BOOL)arg3;
- (id)closestCachedOccurrenceToDate:(double)arg1 forEventUID:(int)arg2;
- (id)_eventWithURI:(id)arg1 checkValid:(BOOL)arg2;
- (BOOL)_parseURI:(id)arg1 expectedScheme:(id)arg2 identifier:(id *)arg3 options:(id *)arg4;
- (void)_addObjectToPendingCommits:(id)arg1;
- (BOOL)removeCalendar:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (BOOL)saveCalendar:(id)arg1 commit:(BOOL)arg2 error:(id *)arg3;
- (id)_calendarWithID:(id)arg1;
- (BOOL)_calendar:(id)arg1 supportsEntityType:(unsigned int)arg2;
- (id)registerFetchedObjectWithID:(id)arg1 withDefaultLoadedProperties:(id)arg2 inSet:(id)arg3;
- (void)_saveWithoutNotify;
- (id)_allCalendars;
- (BOOL)commit:(id *)arg1;
- (id)registerFetchedObjectWithID:(id)arg1;
- (void)_databaseChangedExternally;
- (void)_validateObjectIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_unregisterObject:(id)arg1;
- (void)requestAccessToEntityType:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_accessStatusChanged;
- (void)_requestAccessForEntityType:(unsigned int)arg1;
- (BOOL)isDataProtected;
- (id)initWithOptions:(unsigned long)arg1 path:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

