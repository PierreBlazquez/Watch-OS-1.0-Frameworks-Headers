//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class CMAccelerometerData, CMAmbientPressureData, CMDeviceMotion, CMGyroData, CMMagnetometerData;

@interface CMMotionManager : NSObject
{
    id _internal;
}

+ (void)initialize;
+ (BOOL)hasRunMiniCal;
+ (CDStruct_75b2c6b4)gyroCalibrationDatabaseGetBiasFit;
+ (BOOL)configureM7Activity:(BOOL)arg1 stepCounting:(BOOL)arg2 activityForceCodeTransition:(BOOL)arg3 stepCountingForceCodeTransition:(BOOL)arg4 threshold:(BOOL)arg5 impulse:(BOOL)arg6 onBodyDetection:(BOOL)arg7 ispMode:(unsigned char)arg8 predictionInterval:(float)arg9 logLevel:(BOOL)arg10 proactiveRevisitTime:(unsigned short)arg11;
+ (BOOL)startGyroMiniCalibration;
+ (BOOL)supportsGyroMiniCalibration;
+ (void)setAllowInBackground:(BOOL)arg1;
+ (unsigned int)availableAttitudeReferenceFrames;
+ (void)dummySelector:(id)arg1;
@property(readonly) CMAccelerometerData *accelerometerData; // @dynamic accelerometerData;
- (void)startAccelerometerUpdates;
- (void)startDeviceMotionUpdates;
- (void)stopDeviceMotionUpdates;
@property(readonly) CMDeviceMotion *deviceMotion; // @dynamic deviceMotion;
@property(nonatomic) double deviceMotionUpdateInterval; // @dynamic deviceMotionUpdateInterval;
- (void)setNotificationCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2;
@property(readonly, nonatomic, getter=isDeviceMotionAvailable) BOOL deviceMotionAvailable; // @dynamic deviceMotionAvailable;
- (void)setDeviceMotionCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3 fsync:(BOOL)arg4;
- (void)setWantsPowerConservativeDeviceMotion:(BOOL)arg1;
- (void)setMaxAccelerationVarianceForStability:(float)arg1;
- (void)setSensorTurnOffTime:(double)arg1;
- (void)setSensorThrottleTime:(double)arg1;
- (id)initUsingGyroOnlySensorFusion;
- (void)setAccelerometerDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;
@property(readonly, nonatomic, getter=isAccelerometerActive) BOOL accelerometerActive; // @dynamic accelerometerActive;
@property(readonly, nonatomic, getter=isAccelerometerAvailable) BOOL accelerometerAvailable; // @dynamic accelerometerAvailable;
@property(nonatomic) double accelerometerUpdateInterval; // @dynamic accelerometerUpdateInterval;
- (void)stopAccelerometerUpdates;
- (id)init;
- (void)dealloc;
- (double)deviceMotionGyroDt;
- (double)deviceMotionRequestedCompassUpdateInterval;
- (double)deviceMotionRequestedGyroUpdateInterval;
- (double)deviceMotionRequestedAccelerometerUpdateInterval;
- (int)gyroStartupLatency;
- (BOOL)setSidebandSensorFusionEnable:(BOOL)arg1 withSnoopHandler:(CDUnknownBlockType)arg2;
- (BOOL)setSidebandSensorFusionEnable:(BOOL)arg1;
- (id)initUsing6AxisSensorFusion;
@property(nonatomic) BOOL showsDeviceMovementDisplay;
- (void)stopMagnetometerUpdates;
- (void)startMagnetometerUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)startMagnetometerUpdates;
@property(readonly) CMMagnetometerData *magnetometerData;
@property(nonatomic) double magnetometerUpdateInterval;
@property(readonly, nonatomic, getter=isMagnetometerActive) BOOL magnetometerActive;
- (int)gyttNumTemperatures;
- (void)rebuildGytt;
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(int)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(int)arg1;
- (void)startDeviceMotionUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)stopGyroUpdates;
- (void)startGyroUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)startGyroUpdates;
@property(readonly) CMGyroData *gyroData; // @dynamic gyroData;
@property(nonatomic) double gyroUpdateInterval; // @dynamic gyroUpdateInterval;
@property(readonly, nonatomic, getter=isGyroActive) BOOL gyroActive; // @dynamic gyroActive;
@property(readonly) CMAmbientPressureData *ambientPressureData;
- (void)stopAmbientPressureUpdates;
- (void)startAmbientPressureUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)startAmbientPressureUpdates;
- (BOOL)isAmbientPressureActive;
- (double)ambientPressureUpdateInterval;
- (void)setAmbientPressureUpdateInterval:(double)arg1;
- (void)startAccelerometerUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (BOOL)useAccelerometer;
- (void)setUseAccelerometer:(BOOL)arg1;
- (void)setDeviceMotionCompassAlignmentCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2;
- (void)setDeviceMotionCompassDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2;
- (void)setGyroBiasAndVarianceCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2;
- (void)didBecomeActivePrivate:(id)arg1;
- (void)willResignActivePrivate:(id)arg1;
- (void)showDeviceMovementDisplay;
@property(readonly, nonatomic, getter=isSidebandSensorFusionAvailable) BOOL sidebandSensorFusionAvailable;
- (void)setSidebandTimeSyncHandler:(CDUnknownBlockType)arg1;
- (void)startWatchdogCheckinsPrivate;
- (BOOL)setSidebandSensorFusionEnable:(BOOL)arg1 measureLatency:(BOOL)arg2 withSnoopHandler:(CDUnknownBlockType)arg3;
- (void)setMagnetometerDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;
- (void)setGyroDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;
- (void)setShowsDeviceMovementDisplayPrivate:(BOOL)arg1;
@property(readonly, nonatomic, getter=isMagnetometerAvailable) BOOL magnetometerAvailable;
- (void)startMagnetometerUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setMagnetometerUpdateIntervalPrivate:(double)arg1;
- (void)dismissDeviceMovementDisplay;
@property(readonly, nonatomic, getter=isDeviceMotionActive) BOOL deviceMotionActive; // @dynamic deviceMotionActive;
- (void)startDeviceMotionUpdatesPrivateUsingReferenceFrame:(int)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) int attitudeReferenceFrame; // @dynamic attitudeReferenceFrame;
- (void)setDeviceMotionUpdateIntervalPrivate:(double)arg1;
@property(readonly, nonatomic, getter=isGyroAvailable) BOOL gyroAvailable; // @dynamic gyroAvailable;
- (void)startGyroUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setGyroUpdateIntervalPrivate:(double)arg1;
- (BOOL)isAmbientPressureAvailable;
- (void)stopAmbientPressureUpdatesPrivate;
- (void)startAmbientPressureUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setAmbientPressureUpdateIntervalPrivate:(double)arg1;
- (void)startAccelerometerUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setAccelerometerUpdateIntervalPrivate:(double)arg1;
- (void)stopWatchdogCheckinsPrivate;
- (void)stopMagnetometerUpdatesPrivate;
- (void)stopDeviceMotionUpdatesPrivate;
- (void)stopGyroUpdatesPrivate;
- (void)stopAccelerometerUpdatesPrivate;
- (void)deallocPrivate;
- (void)didBecomeActive:(id)arg1;
- (void)willResignActive:(id)arg1;
- (id)initPrivate;
- (void)onGeomagneticModel:(const CDStruct_3e502cbb *)arg1;
- (void)onDeviceMotion:(const struct Sample *)arg1;
- (void)onMagnetometer:(const struct Sample *)arg1;
- (void)onGyro:(const struct Sample *)arg1;
- (void)onAccelerometer:(const struct Sample *)arg1;
- (void)onAmbientPressure:(const struct Sample *)arg1;

@end

