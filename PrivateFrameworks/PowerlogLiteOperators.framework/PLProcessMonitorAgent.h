//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "PLAgent.h"

@class NSDate, PLEntryNotificationOperatorComposition, PLNSNotificationOperatorComposition;

@interface PLProcessMonitorAgent : PLAgent
{
    BOOL _firstBoot;
    NSDate *_currentCachedDate;
    NSDate *_previousCacheDate;
    PLEntryNotificationOperatorComposition *_batteryLevelChanged;
    PLNSNotificationOperatorComposition *_asertionNotifications;
    double _currentCachedTotalCPUTime;
}

+ (id)entryEventIntervalDefinitionProcessMonitorDiff;
+ (id)entryEventBackwardDefinitionProcessMonitor;
+ (id)entryEventForwardProcessID;
+ (id)entryEventPointMemoryTracking;
+ (id)entryEventNoneDefinitions;
+ (id)entryEventIntervalDefinitions;
+ (id)entryEventBackwardDefinitions;
+ (id)entryEventForwardDefinitions;
+ (id)entryEventPointDefinitions;
+ (id)accountingGroupDefinitions;
+ (id)defaults;
+ (void)load;
@property(retain) PLNSNotificationOperatorComposition *asertionNotifications; // @synthesize asertionNotifications=_asertionNotifications;
@property BOOL firstBoot; // @synthesize firstBoot=_firstBoot;
- (void)logEventBackwardProcessMonitor;
- (BOOL)isCachedForProcessID:(int)arg1 andName:(id)arg2;
@property double currentCachedTotalCPUTime; // @synthesize currentCachedTotalCPUTime=_currentCachedTotalCPUTime;
@property(retain) NSDate *previousCacheDate; // @synthesize previousCacheDate=_previousCacheDate;
- (id)processMonitorMultiKeyFromProcessID:(id)arg1;
- (void)logEventBackwardProcessMonitorUsingCache;
- (void)logEventIntervalProcessMonitorIntervalUsingCache;
- (void)updateProcessMonitorCache;
@property(retain) NSDate *currentCachedDate; // @synthesize currentCachedDate=_currentCachedDate;
- (id)eventForwardProcessIDForPID:(int)arg1;
- (BOOL)isCachedForProcessID:(int)arg1;
- (void)logEventPointMemoryTracking;
- (void)logEventIntervalProcessMonitorInterval;
- (id)trimConditionsForEntryKey:(id)arg1 forTrimDate:(id)arg2;
@property(retain) PLEntryNotificationOperatorComposition *batteryLevelChanged; // @synthesize batteryLevelChanged=_batteryLevelChanged;
- (void)initOperatorDependancies;
- (void).cxx_destruct;
- (void)log;
- (id)init;

@end

