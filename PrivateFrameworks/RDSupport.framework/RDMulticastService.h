//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSString;

@interface RDMulticastService : NSObject
{
    BOOL _didCompleteHandshake;
    BOOL _continueAfterHandshake;
    BOOL _shouldAllowIDSReset;
    BOOL _shouldRefetchIDSPairingState;
    CDUnknownBlockType _connectionStateChangedBlock;
    int _connectionState;
    NSObject<OS_dispatch_queue> *_handshakeWorkQueue;
    NSObject<OS_dispatch_source> *_multicastSendTimer;
    NSString *_localInterfaceName;
    NSString *_localIP;
    NSString *_remoteIP;
    struct addrinfo *_multicastAddr;
    int _sendSocketFd;
    int _receiveSocketFd;
    NSObject<OS_dispatch_source> *_readSource;
    int _unansweredMulticastCount;
    int _repeatedSendFailureCount;
    int _repeatedSendFailureBails;
    CDUnknownBlockType _handshakeCompletionBlock;
    CDUnknownBlockType _multicastPayloadCallback;
    NSString *_lastKnownIDSPairingRecordsState;
    double _senderTime;
}

+ (id)ipv4AddressForInterface:(id)arg1;
+ (id)localEthernetInterfaceName;
@property(nonatomic) BOOL shouldAllowIDSReset; // @synthesize shouldAllowIDSReset=_shouldAllowIDSReset;
@property(nonatomic) int receiveSocketFd; // @synthesize receiveSocketFd=_receiveSocketFd;
@property(nonatomic) int sendSocketFd; // @synthesize sendSocketFd=_sendSocketFd;
@property(nonatomic) struct addrinfo *multicastAddr; // @synthesize multicastAddr=_multicastAddr;
- (void)performHandshakeWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)setUpMulticastSendTimer;
- (BOOL)setUpReceiveDispatchSource;
- (BOOL)setUpMulticastReceiveSocket;
- (BOOL)setUpMulticastSendSocket;
- (BOOL)discoverLocalInterface;
@property(copy, nonatomic) CDUnknownBlockType handshakeCompletionBlock; // @synthesize handshakeCompletionBlock=_handshakeCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType multicastPayloadCallback; // @synthesize multicastPayloadCallback=_multicastPayloadCallback;
- (void)resetHandshakeState;
- (void)tearDownMulticastSendReceiveState;
@property(nonatomic) BOOL continueAfterHandshake; // @synthesize continueAfterHandshake=_continueAfterHandshake;
@property(nonatomic) BOOL didCompleteHandshake; // @synthesize didCompleteHandshake=_didCompleteHandshake;
@property(nonatomic) int repeatedSendFailureBails; // @synthesize repeatedSendFailureBails=_repeatedSendFailureBails;
@property(nonatomic) int unansweredMulticastCount; // @synthesize unansweredMulticastCount=_unansweredMulticastCount;
- (BOOL)sendHandshakeMulticast;
- (void)syncTimeWithSender:(double)arg1;
@property(nonatomic) double senderTime; // @synthesize senderTime=_senderTime;
@property(nonatomic) int repeatedSendFailureCount; // @synthesize repeatedSendFailureCount=_repeatedSendFailureCount;
@property(copy, nonatomic) NSString *lastKnownIDSPairingRecordsState; // @synthesize lastKnownIDSPairingRecordsState=_lastKnownIDSPairingRecordsState;
@property(retain, nonatomic) NSString *remoteIP; // @synthesize remoteIP=_remoteIP;
@property(nonatomic) BOOL shouldRefetchIDSPairingState; // @synthesize shouldRefetchIDSPairingState=_shouldRefetchIDSPairingState;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *handshakeWorkQueue; // @synthesize handshakeWorkQueue=_handshakeWorkQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *multicastSendTimer; // @synthesize multicastSendTimer=_multicastSendTimer;
- (BOOL)receiveHandshakeMulticast;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *readSource; // @synthesize readSource=_readSource;
@property(retain, nonatomic) NSString *localIP; // @synthesize localIP=_localIP;
@property(retain, nonatomic) NSString *localInterfaceName; // @synthesize localInterfaceName=_localInterfaceName;
@property(copy, nonatomic) CDUnknownBlockType connectionStateChangedBlock; // @synthesize connectionStateChangedBlock=_connectionStateChangedBlock;
- (void)sendMulticastPayload:(id)arg1;
- (void)beginMulticastConnectionWithPayloadCallBack:(CDUnknownBlockType)arg1;
@property(nonatomic) int connectionState; // @synthesize connectionState=_connectionState;
- (void).cxx_destruct;
- (id)init;

@end

