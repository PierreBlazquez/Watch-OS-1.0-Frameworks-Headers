//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Named Structures

struct Component;

struct CuMatrix<float>;

struct Nnet {
    struct vector<kaldi::nnet1::Component *, std::__1::allocator<kaldi::nnet1::Component *>> components_;
    struct vector<kaldi::CuMatrix<float>, std::__1::allocator<kaldi::CuMatrix<float>>> propagate_buf_;
    struct vector<kaldi::CuMatrix<float>, std::__1::allocator<kaldi::CuMatrix<float>>> backpropagate_buf_;
    struct NnetTrainOptions opts_;
};

struct NnetTrainOptions {
    float learn_rate;
    float momentum;
    float l2_penalty;
    float l1_penalty;
};

struct RecogAudioBuffer {
    CDUnknownFunctionPointerType *_vptr$OnlineAudioSourceItf;
    int state;
    unsigned int samplingRate;
    int maxBufferLen;
    _Bool maxBufferLenReached;
    unsigned int bufferPos;
    struct Vector<float> linearBuffer;
    struct mutex bufferMutex;
    struct condition_variable_any bufferCond;
    struct thread recogThread;
    _Bool endOfAudio;
};

struct Vector<float> {
    float *data_;
    int dim_;
    int capacity_;
};

struct condition_variable {
    struct _opaque_pthread_cond_t {
        long __sig;
        char __opaque[24];
    } __cv_;
};

struct condition_variable_any {
    struct condition_variable __cv_;
    struct shared_ptr<std::__1::mutex> __mut_;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long __sig;
        char __opaque[40];
    } __m_;
};

struct shared_ptr<std::__1::mutex> {
    struct mutex *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct thread {
    struct _opaque_pthread_t *__t_;
};

struct vector<kaldi::CuMatrix<float>, std::__1::allocator<kaldi::CuMatrix<float>>> {
    struct CuMatrix<float> *__begin_;
    struct CuMatrix<float> *__end_;
    struct __compressed_pair<kaldi::CuMatrix<float>*, std::__1::allocator<kaldi::CuMatrix<float>>> {
        struct CuMatrix<float> *__first_;
    } __end_cap_;
};

struct vector<kaldi::nnet1::Component *, std::__1::allocator<kaldi::nnet1::Component *>> {
    struct Component **__begin_;
    struct Component **__end_;
    struct __compressed_pair<kaldi::nnet1::Component **, std::__1::allocator<kaldi::nnet1::Component *>> {
        struct Component **__first_;
    } __end_cap_;
};

