//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <VectorKit/VKVectorMapModel.h>

#import "VKMapLayer.h"
#import "VKMercatorTerrainHeightProvider.h"

@class NSString, VK3DObjectSubMapModel, VKAnimation, VKMercatorTerrainHeightCache, VKSkyModel;

@interface VKBuildingFootprintMapModel : VKVectorMapModel <VKMercatorTerrainHeightProvider, VKMapLayer>
{
    float _brightness;
    int _vectorType;
    int _buildingMode;
    VKAnimation *_styleChangeAnimation;
    VKAnimation *_fadeBuildingAnimation;
    BOOL _fadeTiles;
    VKSkyModel *_skyModel;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList>>> _currentOccluders;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList>>> _previousOccluders;
    struct RenderItemBatcher _batcher;
    float _minLayeringHeight;
    float _maxLayeringHeight;
    _Bool _shouldDraw3DBuildingsInVectorBuildingsRenderPass;
    _Bool _shouldDraw3DBuildingsIn3DBuildingsRenderPass;
    BOOL _initializedStyles;
    id <VKBuildingFootprintMapModelDelegate> _delegate;
    int _stencilRef;
    VK3DObjectSubMapModel *_landmarksModel;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>>> _strokeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>>> _fillShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>>> _topShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>>> _stroke3DShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup>>> _buildingShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>>> _pointyRoofShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>>> _shadowShaderSetupPool;
    struct shared_ptr<ggl::RenderState> _strokeRenderState;
    struct shared_ptr<ggl::RenderState> _fillRenderState;
    struct shared_ptr<ggl::RenderState> _fillRenderStateWithBlending;
    struct shared_ptr<ggl::RenderState> _threeDRenderStateWithoutBlending;
    struct shared_ptr<ggl::RenderState> _threeDRenderStateWithBlending;
    struct shared_ptr<ggl::RenderState> _threeDStrokeRenderState;
    struct shared_ptr<ggl::RenderState> _shadowsRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _stroke3DRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _buildingRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _shadowRenderItemPool;
    BOOL _supportsStrokes;
    BOOL _supports3DStrokes;
    BOOL _supportsBuildingShadows;
    BOOL _supports3DBuildings;
    VKMercatorTerrainHeightCache *_heightCache;
}

@property(retain, nonatomic) VK3DObjectSubMapModel *landmarksModel; // @synthesize landmarksModel=_landmarksModel;
@property(retain, nonatomic) VKSkyModel *skyModel; // @synthesize skyModel=_skyModel;
@property(nonatomic) int buildingMode; // @synthesize buildingMode=_buildingMode;
@property(nonatomic) BOOL fadeTiles; // @synthesize fadeTiles=_fadeTiles;
- (void)generateRenderItemsForBuildingShadowsInScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)generate3DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)generate2DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)setBuildingMode:(int)arg1 animated:(BOOL)arg2;
- (void)generate3DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)generate2DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)resetPools;
- (void)_updateBuildingModeForContext:(id)arg1;
- (void)flushPools;
- (void)animateTiles:(id)arg1 fromAlpha:(float)arg2 toAlpha:(float)arg3 fromScale:(float)arg4 toScale:(float)arg5;
- (void)_updateStyles;
- (void)_clearOccluders;
- (void)vectorTypeDidChange;
@property(nonatomic) int vectorType; // @synthesize vectorType=_vectorType;
- (void)willStopDrawingTiles:(id)arg1;
- (void)willStartDrawingTiles:(id)arg1;
- (void)removePersistingExitingTiles:(id)arg1;
- (BOOL)wantsCategorizedSourceTiles;
- (unsigned long long)mapLayerPosition;
- (double)maxTileHeightAtPoint:(struct VKPoint)arg1;
- (void)stylesheetDidChange;
@property(readonly, nonatomic) VKMercatorTerrainHeightCache *heightCache; // @synthesize heightCache=_heightCache;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (double)heightAtPoint:(struct VKPoint)arg1;
- (void).cxx_destruct;
- (void)didReceiveMemoryWarning:(BOOL)arg1;
- (id).cxx_construct;
- (void)reset;
- (void)setActive:(BOOL)arg1;
@property(nonatomic) id <VKBuildingFootprintMapModelDelegate> delegate; // @synthesize delegate=_delegate;
- (id)init;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

